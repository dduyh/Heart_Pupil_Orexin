%% Generate Pulse Width Modulated Signals Using NI Devices
%
% This example shows how to generate a pulse width modulated signal to
% drive a stepper motor.

%%
clear; close all; clc;

%% Create a Counter Input PulseWidth Channel
% Create a DAQ Session, and add a counter output channel with
% |PulseGeneration| measurement type. An analog input channel is added to
% monitor the pulse generated by the counter output channel. 

s = daq.createSession('ni');
addAnalogInputChannel(s,'Dev1', 0, 'Voltage');
addCounterOutputChannel(s,'Dev1', 1, 'PulseGeneration');
addCounterOutputChannel(s,'Dev1', 2, 'PulseGeneration');
addCounterInputChannel(s, 'Dev1', 0, 'Position');
s

%% Determine the Terminal of the Counter Output Channel
% To connect the output signal to the correct terminal, examine the
% |Terminal| property of the counter channel. The terminal is determined by
% the hardware.
s.Channels(2).Terminal
s.Channels(3).Terminal

%% Clocked Counter Output
% Use counter output channel 0 to generate a fixed pulse width modulated
% signal on terminal PFI0. Trigger the motor after 0.5 seconds, with a 75%
% duty cycle.
ch = s.Channels(2);
ch.Frequency = 10;
ch.InitialDelay = 0;
ch.DutyCycle = 0.5;

ch = s.Channels(3);
ch.Frequency = 10;
ch.InitialDelay = 0.05;
ch.DutyCycle = 0.5;

s.Rate = 1000;

s.IsContinuous = true;

lh = addlistener(s,'DataAvailable', @(src,event) plot(event.TimeStamps, event.Data));
s.startBackground()

%%
% Stop the Continuous Background Acquisition
s.stop();

% Delete the listener.
delete(lh)
